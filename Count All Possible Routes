#include <vector>
using namespace std;

class Solution {
public:
    int countRoutes(vector<int>& locations, int start, int finish, int fuel) {
        const int MOD = 1000000007;
        int n = locations.size();
        vector<vector<int>> dp(n, vector<int>(fuel + 1, -1));
        return dfs(locations, start, finish, fuel, dp, MOD) % MOD;
    }
    
private:
    int dfs(vector<int>& locations, int currCity, int finish, int fuel, vector<vector<int>>& dp, const int MOD) {
        if (fuel < 0) return 0;
        if (dp[currCity][fuel] != -1) return dp[currCity][fuel];
        
        int count = (currCity == finish) ? 1 : 0;
        for (int nextCity = 0; nextCity < locations.size(); nextCity++) {
            if (nextCity != currCity) {
                int fuelCost = abs(locations[currCity] - locations[nextCity]);
                count = (count + dfs(locations, nextCity, finish, fuel - fuelCost, dp, MOD)) % MOD;
            }
        }
        
        dp[currCity][fuel] = count;
        return count;
    }
};
