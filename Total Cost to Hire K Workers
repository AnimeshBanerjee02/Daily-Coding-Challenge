import heapq

class Solution:
    def totalCost(self, costs, k, candidates):
        head_workers = costs[:candidates]
        tail_workers = costs[max(candidates, len(costs) - candidates):]
        heapq.heapify(head_workers)
        heapq.heapify(tail_workers)
        
        answer = 0
        next_head, next_tail = candidates, len(costs) - 1 - candidates 

        for _ in range(k): 
            if not tail_workers or (head_workers and head_workers[0] <= tail_workers[0]): 
                answer += heapq.heappop(head_workers)

                # Only refill the queue if there are workers outside the two queues.
                if next_head <= next_tail: 
                    heapq.heappush(head_workers, costs[next_head])
                    next_head += 1
            else: 
                answer += heapq.heappop(tail_workers)

                # Only refill the queue if there are workers outside the two queues.
                if next_head <= next_tail:  
                    heapq.heappush(tail_workers, costs[next_tail])
                    next_tail -= 1
                    
        return answer
