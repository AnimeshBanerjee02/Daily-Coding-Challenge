#include <vector>
#include <queue>
#include <cmath>

class Solution {
public:
    double maxProbability(int n, std::vector<std::vector<int>>& edges, std::vector<double>& succProb, int start, int end) {
        // Creating an adjacency list to represent the graph
        std::vector<std::vector<std::pair<int, double>>> graph(n);
        for (int i = 0; i < edges.size(); i++) {
            int a = edges[i][0];
            int b = edges[i][1];
            double prob = succProb[i];
            graph[a].push_back({b, prob});
            graph[b].push_back({a, prob});
        }
        
        // Using Dijkstra's algorithm to find the maximum probability path
        std::vector<double> probabilities(n, 0.0);
        probabilities[start] = 1.0;
        
        std::priority_queue<std::pair<double, int>> pq;
        pq.push({1.0, start});
        
        while (!pq.empty()) {
            auto [prob, node] = pq.top();
            pq.pop();
            
            if (node == end) {
                return prob;
            }
            
            for (auto [neighbor, edgeProb] : graph[node]) {
                double newProb = prob * edgeProb;
                if (newProb > probabilities[neighbor]) {
                    probabilities[neighbor] = newProb;
                    pq.push({newProb, neighbor});
                }
            }
        }
        
        return 0.0; // No path found
    }
};
